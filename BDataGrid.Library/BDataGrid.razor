@typeparam TItem
@inject IBDataGridStyle BDataGridStyle
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
<div @ref="TableRef" style="overflow: visible; width: @Width; height: @Height">
    <div style="height: calc(100% + @HeaderPadding); width: 100%; position: relative; display: flex; flex-direction: column">

        <div style="float: left; overflow:hidden; width: calc(100% - 10px); flex: none; padding-bottom: @HeaderPadding">
            <table style="min-width: calc(@GetWidth()); max-width: calc(@GetWidth());" class="@(BDataGridStyle.TableClass)">
                <thead class="@(BDataGridStyle.HeaderClass)">
                    <tr class="@(BDataGridStyle.HeaderRowClass)">
                        @foreach (var col in Builder.Columns)
                        {
                            var width = col.Value.Width == null ? (100 / Builder.Columns.Count) + "%" : col.Value.Width;
                            <th @onclick="() => SortingDirectionChangedFromClient(col.Value)" class="@(col.Value.CurrentSortDirection switch
                             {
                                 SortDirection.Ascending => BDataGridStyle.HeaderSortedAscendingClass,
                                 SortDirection.Descending => BDataGridStyle.HeaderSortedDescendingClass,
                                 _ => ""
                             }) @(col.Value.IsFixed ? "fixedCol" : "")" style="width: @width; min-width: @width; max-width: @width; overflow: hidden; position: relative;">
                                @(col.Value.HeaderText ?? "Unknowned header")
                            </th>
                        }
                    </tr>

                    @if (Builder.ShowHeaderFilters)
                    {
                        <tr @onclick="() => SelectedCellFromClient(null, null, false)" @onclick:stopPropagation="true">
                            @foreach (var col in Builder.Columns)
                            {
                                var width = col.Value.Width == null ? (100 / Builder.Columns.Count) + "%" : col.Value.Width;
                                <th class="@(col.Value.IsFixed ? "fixedCol" : "")">
                                    @col.Value.FilterRenderFragment(this)
                                </th>
                            }
                        </tr>
                    }

                </thead>
                <tbody>
                    @for (int i = 0; i < Builder.HeaderItems.Count; ++i)
                    {
                        var itemAndIndex = Builder.HeaderItems[i];
                        var item = itemAndIndex.Item;
                        var rowInfo = Builder.RowInfos[itemAndIndex.Index] ?? Builder.GlobalRowInfo;


                        <BDataGridRow TItem="TItem" DataGrid="this" Item="item" RowInfo="rowInfo"></BDataGridRow>
                    }
                </tbody>
            </table>
        </div>

        <div style="float: left; height: 100%; width: inherit; overflow-y: scroll; overflow-x: hidden; position: relative; top: -@(HeaderPadding)">
            <table style="min-width: calc(@GetWidth()); max-width: calc(@GetWidth());" class="@(BDataGridStyle.TableClass)">

                <tbody>

                    @for (int i = CurrentPage * PageSize; i < Builder.FilteredItems.Count && i - CurrentPage * PageSize < PageSize; ++i)
                    {
                        var itemAndIndex = Builder.FilteredItems[i];
                        var item = itemAndIndex.Item;
                        var rowInfo = Builder.RowInfos[itemAndIndex.Index] ?? Builder.GlobalRowInfo;


                        <BDataGridRow TItem="TItem" DataGrid="this" Item="item" RowInfo="rowInfo"></BDataGridRow>
                    }

                </tbody>

            </table>
        </div>

        <div style="float: left; width: calc(100% - 10px); overflow-x: auto; flex: none; position: relative; top: -@(HeaderPadding)">
            <table style="min-width: calc(@GetWidth()); max-width: calc(@GetWidth());" class="@(BDataGridStyle.TableClass)">
                <tfoot>

                    @for (int i = 0; i < Builder.FooterItems.Count; ++i)
                    {
                        var itemAndIndex = Builder.FooterItems[i];
                        var item = itemAndIndex.Item;
                        var rowInfo = Builder.RowInfos[itemAndIndex.Index] ?? Builder.GlobalRowInfo;


                        <BDataGridRow TItem="TItem" DataGrid="this" Item="item" RowInfo="rowInfo"></BDataGridRow>
                    }
                </tfoot>
            </table>

            <div class="scrollBarDiv" style="height: 1px"></div>
        </div>

        <div style="margin-top: 10px; position: relative; top: -@(HeaderPadding)">

            @if (CurrentTotalPages > 1)
            {
                <div class="@BDataGridStyle.PaginationDivClass">
                    @if (CurrentPage > 0)
                    {
                        <a class="@BDataGridStyle.PaginationPageNumberClass" @onclick="() => CurrentPage = 0">
                            <i class="@BDataGridStyle.PaginationLeftIcon"></i>
                        </a>
                    }
                    @if (CurrentPage > 1)
                    {
                        <a class="@BDataGridStyle.PaginationPageNumberClass" @onclick="() => CurrentPage -= 2">@(CurrentPage - 1)</a>
                    }
                    @if (CurrentPage > 0)
                    {
                        <a class="@BDataGridStyle.PaginationPageNumberClass" @onclick="() => CurrentPage -= 1">@(CurrentPage)</a>
                    }
                    <a class="@BDataGridStyle.PaginationPageNumberClass active">@(CurrentPage + 1)</a>
                    @if (CurrentTotalPages - CurrentPage > 1)
                    {
                        <a class="@BDataGridStyle.PaginationPageNumberClass" @onclick="() => CurrentPage += 1">@(CurrentPage + 2)</a>
                    }
                    @if (CurrentTotalPages - CurrentPage > 2)
                    {
                        <a class="@BDataGridStyle.PaginationPageNumberClass" @onclick="() => CurrentPage += 2">@(CurrentPage + 3)</a>
                    }
                    @if (CurrentPage != CurrentTotalPages - 1)
                    {
                        <a class="@BDataGridStyle.PaginationPageNumberClass" @onclick="() => CurrentPage = CurrentTotalPages - 1">
                            <i class="@BDataGridStyle.PaginationRightIcon"></i>
                        </a>
                    }
                </div>

            }

            <div class="@BDataGridStyle.ExportExcelDivClass">
                <a class="@BDataGridStyle.ExportExcelAClass" @onclick="ExportExcel">
                    <i class="@BDataGridStyle.ExportExcelIconClass"></i>
                </a>
            </div>

        </div>
    </div>
</div>

@code {


    private string GetWidth()
    {
        var allWidths = Builder.Columns.Select(col => col.Value.Width ?? ((100f / Builder.Columns.Count) + "%"));

        return string.Join(" + ", allWidths);
    }

}